type Query {
    "Lista dos estudantes da academia"
    estudantes: [Estudante!]!
    "Informação do estudante da academia selecionado por ID"
    estudante(id: ID!): Estudante!
    "Lista dos cursos da academia"
    cursos: [Curso!]!
    "Informação do curso da academia selecionado por ID"
    curso(curso: ID!): Curso!
}

type Mutation {
    cursoNovo(curso: CursoInput!): Curso!
    modificarCurso(curso: CursoInput!): Curso!
    eliminarCurso(id: ID!): Curso!
}

input CursoInput {
    id: ID
    title: String!
    description: String!
    clases: Int!
    time: Float!
    logo: String!
    level: Nivel = TODOS
    path: String!
    teacher: String!
}

"Informação dos estudantes"
type Estudante {
    "identificador do estudante"
    id: ID!
    name: String!
    email: String!
    website: String
    courses: [Curso!]!
}

type Curso {
    id: ID!
    title: String!
    description: String!
    clases: Int!
    time: Float!
    logo: String!
    level: Nivel!
    path: String!
    teacher: String!
    estudantes: [Estudante]
    reviews: [Valoracion!]!
}

enum Nivel {
    TODOS
    NOVATOS
    INTERMEDIARIO
    EXPERT
}

type Valoracion {
    id: ID!
    name: String!
    points: Float!
    comment: String
}